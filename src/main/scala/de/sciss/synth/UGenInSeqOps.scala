//package de.sciss.synth
//
//final private[synth] class UGenInSeqOps( a: UGenInSeq ) extends GEOps( a ) {
//   override def unary_- : GE     = UGenInSeq( a.outputs.flatMap( _.unary_-.outputs ))
//   override def abs : GE	      = UGenInSeq( a.outputs.flatMap( _.abs.outputs ))
//   override def ceil : GE	      = UGenInSeq( a.outputs.flatMap( _.ceil.outputs ))
//   override def floor : GE	      = UGenInSeq( a.outputs.flatMap( _.floor.outputs ))
//   override def frac : GE	      = UGenInSeq( a.outputs.flatMap( _.frac.outputs ))
//   override def signum : GE	   = UGenInSeq( a.outputs.flatMap( _.signum.outputs ))
//   override def squared : GE     = UGenInSeq( a.outputs.flatMap( _.squared.outputs ))
//   override def cubed : GE       = UGenInSeq( a.outputs.flatMap( _.cubed.outputs ))
//   override def sqrt : GE        = UGenInSeq( a.outputs.flatMap( _.sqrt.outputs ))
//   override def exp : GE         = UGenInSeq( a.outputs.flatMap( _.exp.outputs ))
//   override def reciprocal : GE  = UGenInSeq( a.outputs.flatMap( _.reciprocal.outputs ))
//   override def midicps : GE     = UGenInSeq( a.outputs.flatMap( _.midicps.outputs ))
//   override def cpsmidi : GE     = UGenInSeq( a.outputs.flatMap( _.cpsmidi.outputs ))
//   override def midiratio : GE   = UGenInSeq( a.outputs.flatMap( _.midiratio.outputs ))
//   override def ratiomidi : GE   = UGenInSeq( a.outputs.flatMap( _.ratiomidi.outputs ))
//   override def dbamp : GE       = UGenInSeq( a.outputs.flatMap( _.dbamp.outputs ))
//   override def ampdb : GE       = UGenInSeq( a.outputs.flatMap( _.ampdb.outputs ))
//   override def octcps : GE      = UGenInSeq( a.outputs.flatMap( _.octcps.outputs ))
//   override def cpsoct : GE      = UGenInSeq( a.outputs.flatMap( _.cpsoct.outputs ))
//   override def log : GE         = UGenInSeq( a.outputs.flatMap( _.log.outputs ))
//   override def log2 : GE        = UGenInSeq( a.outputs.flatMap( _.log2.outputs ))
//   override def log10 : GE       = UGenInSeq( a.outputs.flatMap( _.log10.outputs ))
//   override def sin : GE         = UGenInSeq( a.outputs.flatMap( _.sin.outputs ))
//   override def cos : GE         = UGenInSeq( a.outputs.flatMap( _.cos.outputs ))
//   override def tan : GE         = UGenInSeq( a.outputs.flatMap( _.tan.outputs ))
//   override def asin : GE        = UGenInSeq( a.outputs.flatMap( _.asin.outputs ))
//   override def acos : GE        = UGenInSeq( a.outputs.flatMap( _.acos.outputs ))
//   override def atan : GE        = UGenInSeq( a.outputs.flatMap( _.atan.outputs ))
//   override def sinh : GE        = UGenInSeq( a.outputs.flatMap( _.sinh.outputs ))
//   override def cosh : GE        = UGenInSeq( a.outputs.flatMap( _.cosh.outputs ))
//   override def tanh : GE        = UGenInSeq( a.outputs.flatMap( _.tanh.outputs ))
//   override def distort : GE     = UGenInSeq( a.outputs.flatMap( _.distort.outputs ))
//   override def softclip : GE    = UGenInSeq( a.outputs.flatMap( _.softclip.outputs ))
//}
