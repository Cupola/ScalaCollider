// from SC2-examples_1.scd
//
// notes:
// - static random operations have been
//   replaced by scalar ugens (Rand, IRand)
//   due to lack of random methods in RichInt, RichFloat.
//   the effect is that the reported number of UGens is
//   slightly higher than the equivalent sclang code.
// - mul and add arguments have been usually dropped from
//   the ugen constructors for simplicity. hence you
//   find frequent use of the madd method.
// - careful with number divisons, e.g. 2/6 yields
//   0.333... in sclang, and 0 in scala. Use 2.0/6 instead

// analog bubbles
val x = play {
    val f = LFSaw.kr(0.4).madd(24, LFSaw.kr(List(8, 7.23)).madd(3, 80)).midicps // glissando function
    CombN.ar(SinOsc.ar(f)*0.04, 0.2, 0.2, 4) // echoing sine wave
}

x.free

val df = SynthDef("AnalogBubbles") {
    val f1 = "freq1".kr(0.4)
    val f2 = "freq2".kr(8)
    val d  = "detune".kr(0.90375)
    val f = LFSaw.ar(f1).madd(24, LFSaw.ar(List(f2, f2*d)).madd(3, 80)).midicps // glissando function
    val x = CombN.ar(SinOsc.ar(f)*0.04, 0.2, 0.2, 4) // echoing sine wave
    Out.ar( 0, x )
}
val x = df.play()
x.set( "freq1" -> 0.1f )  // todo: should support doubles
x.set( "freq2" -> 222.2f )
x.set( "detune" -> 0.44f )

s.freeAll

//////////////////////////////////////////////////////////////////////////

// LFO modulation of Pulse waves and resonant filters
val x = play {
    CombL.ar(
        RLPF.ar(LFPulse.ar(FSinOsc.kr(0.05).madd(80,160),0,0.4)*0.05, 
            FSinOsc.kr(List(0.6, 0.7)).madd(3600, 4000), 0.2),
        0.3, List(0.2, 0.25), 2)
}

//////////////////////////////////////////////////////////////////////////

// moto rev
val x = play {
    RLPF.ar(LFPulse.ar(SinOsc.kr(0.2).madd(10, 21), 0.1), 100, 0.1).clip2(0.4) 
}

//////////////////////////////////////////////////////////////////////////

// scratchy
val x = play { RHPF.ar((BrownNoise.ar(List(0.5,0.5))-0.49).max(0) * 20, 5000, 1) }

//////////////////////////////////////////////////////////////////////////

// sprinkler
val x = play {
    BPZ2.ar(WhiteNoise.ar(LFPulse.kr(LFPulse.kr(0.09, 0, 0.16).madd(10, 7), 0, 0.25)*0.1))
}

val x = play {
    BPZ2.ar(WhiteNoise.ar(LFPulse.kr(MouseX.kr(0.2,50), 0, 0.25)*0.1))
}

//////////////////////////////////////////////////////////////////////////

// harmonic swimming
val x = play {
    val f = 50       // fundamental frequency
    val p = 20       // number of partials per channel
    var z: GE = 0.0  // start of oscil daisy chain
    val offset = Line.kr(0, -0.02, 60)    // causes sound to separate and fade
    for( i <- 0 until p ) {
        z = FSinOsc.ar( f * (i+1) ).madd( // freq of partial
            LFNoise1.kr(
                List( Rand( 2, 10 ), Rand( 2, 10 ))).madd(  // amplitude rate 
                0.02,    // amplitude scale
               offset    // amplitude offset
            ).max( 0 ),  // clip negative amplitudes to zero
            z
        )
    }
    z
}

//////////////////////////////////////////////////////////////////////////

// harmonic tumbling
val x = play {
    val f = 80       // fundamental frequency
    val p = 10       // number of partials per channel
    var z: GE = 0.0  // start of oscil daisy chain
    val trig = XLine.kr(List(10,10), 0.1, 60)  // trigger probability decreases over time
    for( i <- 0 until p ) {
        z = FSinOsc.ar(
                f * (i+1)     // freq of partial
        ).madd(
            Decay2.kr(
                Dust.kr(
                    trig      // trigger rate
                ) * 0.02,     // trigger amplitude
                0.005,        // grain attack time
                Rand(0,0.5)   // grain decay time
            ),
            z
        )
    }
    z
}

//////////////////////////////////////////////////////////////////////////

// Klank - bank of resonators excited by impulses
val x = play {
    val p = 15    // number of partials
    val z =       // filter bank specification :
        KlangSpec.fill(p) {
            (Rand( 80, 10080 ),    // frequencies
             Rand( -1, 1 ),        // amplitudes
             Rand( 0.2, 8.2 ))      // ring times
    }
    Pan2.ar(
        Klank.ar(z, Dust.ar(0.7)*0.04),
        Rand(-1,1)
    )
}

//////////////////////////////////////////////////////////////////////////

// Klank - bank of resonators excited by impulses
val x = play {
    val p = 8    // number of partials
    val exciter = Decay.ar(Dust.ar(0.6)*0.001, 3.1)*WhiteNoise.ar
    for( i <- (1 to 2) ) yield {
        val spec = KlangSpec.fill(p) {
            (Rand( 80, 10080 ), 1, Rand( 0.2, 8.2 ))}
        Klank.ar(spec, exciter)
    }
}

//////////////////////////////////////////////////////////////////////////

// what was I thinking?
val x = play {
    val z = RLPF.ar(
        Pulse.ar(
            SinOsc.kr(4).madd(1, 80).max(
                Decay.ar(LFPulse.ar(0.1, 0, 0.05) * Impulse.ar(8) * 500, 2)
            ), 
            LFNoise1.kr(0.157).madd(0.4, 0.5)
        ) * 0.04,
        LFNoise1.kr(0.2).madd(2000, 2400),
        0.2)
    val y = z * 0.6
    z + List(
          CombL.ar(y, 0.06, LFNoise1.kr(Rand(0, 0.3)).madd(0.025, 0.035), 1) 
        + CombL.ar(y, 0.06, LFNoise1.kr(Rand(0, 0.3)).madd(0.025, 0.035), 1),
          CombL.ar(y, 0.06, LFNoise1.kr(Rand(0, 0.3)).madd(0.025, 0.035), 1)
        + CombL.ar(y, 0.06, LFNoise1.kr(Rand(0, 0.3)).madd(0.025, 0.035), 1)
    )
}

//////////////////////////////////////////////////////////////////////////

// police state
val x = play {
    val n = 4   // number of sirens
    CombL.ar(
        Mix.fill(n) {
            Pan2.ar(
                SinOsc.ar(
                    SinOsc.kr(Rand(0.02, 0.12), Rand(0, 2*Pi)).madd(IRand(0,599), IRand(700, 1299))
                ) * LFNoise2.ar(Rand(80, 120)) * 0.1,
                Rand(-1, 1)
            )
        }
        + LFNoise2.ar(LFNoise2.kr(List(0.4,0.4)).madd(90, 620)) * LFNoise2.kr(List(0.3,0.3)).madd(0.15, 0.18),
        0.3, 0.3, 3)
}

//////////////////////////////////////////////////////////////////////////

// cymbalism
val x = play {
    val p = 15   // number of partials per channel per 'cymbal'.
    val f1 = Rand(500, 2500)
    val f2 = Rand(0, 8000)
    for( i <- (1 to 2) ) yield {
        val z = KlangSpec.fill(p) {
            // sine oscil bank specification :
            (f1 + Rand(0, f2),  // frequencies
             1,                 // amplitudes
             Rand(1, 5))        // ring times
        }
        Klank.ar(z, Decay.ar(Impulse.ar(Rand(0.5, 3.5)), 0.004) * WhiteNoise.ar(0.03))
    }
}


//////////////////////////////////////////////////////////////////////////

// synthetic piano
val x = play {
    var n = 6        // number of keys playing
    Mix.fill(n) {    // mix an array of notes
        // calculate delay based on a random note
        val pitch  = IRand(36, 89)
        val strike = Impulse.ar(Rand(0.1,0.5), Rand(0,2*Pi)) * 0.1    // random period for each key
        val hammerEnv = Decay2.ar(strike, 0.008, 0.04)    // excitation envelope
        Pan2.ar(
            // array of 3 strings per note
            Mix.tabulate(3)( (i) => {
                // detune strings, calculate delay time :
                val detune = Array(-0.05, 0, 0.04)(i)
                val delayTime = 1 / (pitch + detune).midicps
                // each string gets own exciter :
                val hammer = LFNoise2.ar(3000) * hammerEnv   // 3000 Hz was chosen by ear..
                CombL.ar(hammer,   // used as a string resonator
                    delayTime,     // max delay time
                    delayTime,     // actual delay time
                    6)             // decay time of string
            }),
            (pitch - 36)/27 - 1    // pan position: lo notes left, hi notes right
        )
    }
}

//////////////////////////////////////////////////////////////////////////

// reverberated sine percussion
val x = play {
    val d = 6    // number of percolators
    val c = 5    // number of comb delays
    val a = 4    // number of allpass delays

    // sine percolation sound :
    val s = Mix.fill(d) { Resonz.ar(Dust.ar(2.0/d)*50, Rand(200, 3200), 0.003) }

    // reverb predelay time :
    val z = DelayN.ar(s, 0.048)

    // 'c' length modulated comb delays in parallel :
    var y = Mix(CombL.ar(z, 0.1, LFNoise1.kr(for(i <- 0 until c) yield Rand(0,0.1)).madd(0.04, 0.05), 15))

    // chain of 'a' allpass delays on each of two channels (2 times 'a' total) :
    for(i <- 0 until a) { y = AllpassN.ar(y, 0.050, List(Rand(0,0.050),Rand(0,0.050)), 1)}

    // add original sound to reverb and play it :
    s+(0.2*y)
}

//////////////////////////////////////////////////////////////////////////

// reverberated noise bursts
val x = play {
    // pink noise percussion sound :
    val s = Decay.ar(Dust.ar(0.6)*0.2, 0.15) * PinkNoise.ar

    // reverb predelay time :
    val z = DelayN.ar(s, 0.048, 0.048)

    // 6 modulated comb delays in parallel :
    var y = Mix(CombL.ar(z, 0.1, LFNoise1.kr(for(i <- 0 until 6) yield Rand(0,0.1)).madd(0.04, 0.05), 15))

    // chain of 4 allpass delays on each of two channels (8 total) :
    for(i <- 0 until 4) { y = AllpassN.ar(y, 0.050, List(Rand(0,0.050),Rand(0,0.050)), 1)}

    // add original sound to reverb and play it :
    s+y
}

//////////////////////////////////////////////////////////////////////////

// sample and hold liquidities
// mouse x controls clock rate, mouse y controls center frequency
val x = play {
    val clockRate = MouseX.kr(1, 200, 1)
    val clockTime = clockRate.reciprocal
    val clock = Impulse.kr(clockRate, 0.4)

    val centerFreq = MouseY.kr(100, 8000, 1)
    val freq = Latch.kr(WhiteNoise.kr(centerFreq * 0.5)+centerFreq, clock)
    val panPos = Latch.kr(WhiteNoise.kr, clock)
    CombN.ar(
        Pan2.ar(
            SinOsc.ar(freq) *
                Decay2.kr(clock, 0.1 * clockTime, 0.9 * clockTime),
            panPos
        ),
        0.3, 0.3, 2
    )
}

//////////////////////////////////////////////////////////////////////////

// sweepy noise - mouse controls LFO
val x = play {
    val lfoDepth = MouseY.kr(200, 8000, 1)
    val lfoRate = MouseX.kr(4, 60, 1)
    val freq = LFSaw.kr(lfoRate).madd(lfoDepth, lfoDepth * 1.2)
    val filtered = RLPF.ar(WhiteNoise.ar(List(0.03,0.03)), freq, 0.1)
    CombN.ar(filtered, 0.3, 0.3, 2) + filtered
}

//////////////////////////////////////////////////////////////////////////

// aleatoric quartet
// mouse x controls density
val x = play {
    val amp = 0.07
    val density = MouseX.kr(0.01,1)   // mouse determines density of excitation

    // calculate multiply and add for excitation probability
    val dmul = density.reciprocal * 0.5 * amp
    val dadd = dmul.neg + amp

    var signal = Mix.fill(4) {   // mix an array of 4 instruments
        val excitation = PinkNoise.ar(
            // if amplitude is below zero it is clipped
            // density determines the probability of being above zero
            LFNoise1.kr(8).madd(dmul, dadd).max(0)
        )

        val freq = Lag.kr(             // lag the pitch so it glissandos between pitches
            LFNoise0.kr(               // use low freq step noise as a pitch control
                Array(1, 0.5, 0.25)(   // choose a frequency of pitch change
                    util.Random.nextInt(3))).madd(
                7,                     // +/- 7 semitones
                IRand(36, 96)          // random center note
            ).round(1),                // round to nearest semitone
            0.2                        // gliss time
        ).midicps                      // convert to hertz

        Pan2.ar(    // pan each intrument
            CombL.ar(excitation, 0.02, freq.reciprocal, 3),    // comb delay simulates string
            Rand(-1,1)    // random pan position
        )
    }

    // add some reverb via allpass delays
    for(i <- 1 to 5) { signal = AllpassN.ar(signal, 0.05, List(Rand(0,0.05),Rand(0,0.05)), 1) }
    LeakDC.ar( signal, 0.995)    // delays build up a lot of DC, so leak it out here.
}

//////////////////////////////////////////////////////////////////////////

// based on record scratcher by Josh Parmenter (2007)

// path to a mono soundfile here
val buf = Buffer.read(s, "sounds/a11wlk01.wav");
val x = play {
    var speed = MouseX.kr(-10, 10)
    speed = speed - DelayN.kr(speed, 0.1, 0.1)
    speed = MouseButton.kr(1, 0, 0.3) + speed
    val sig = PlayBuf.ar(1, buf.id, speed * BufRateScale.kr(buf.id), loop = 1)
    List( sig, sig )
}

// move mouse to scrub the record.
// press mouse button to 'stop the record', you can scrub while it is stopped.

// stop the synth
x.release
// free the Buffer
buf.free
